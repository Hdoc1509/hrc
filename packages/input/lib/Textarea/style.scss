@use "@hrc/sass-utils" as hrc;
@use "@scss/colors" as *;

@mixin color-variants($colors) {
  @each $color, $_ in $colors {
    &--#{$color} {
      --textarea-border-color-focus: var(
        --#{$color},
        #{map-get($colors, $color, main)}
      );
    }
  }
}

.textarea {
  // TODO: Use internal css variables as in @hrc/spinner
  width: 200px;
  background-color: var(--textarea-bg, transparent);
  border: 1px solid var(--textarea-border-color, $input-border-color);
  border-radius: var(--textarea-radius, 8px);
  border-bottom-right-radius: 0;
  box-sizing: border-box;
  outline: 1px solid transparent;
  padding: var(--textarea-padding, 1rem 0.75rem);

  color: var(--textarea-text, #000);
  font-family: inherit;
  font-size: var(--textarea-font-size, 0.875rem);
  font-weight: var(--textarea-font-weight, 500);
  line-height: 20px;

  resize: vertical;

  &:hover {
    --textarea-border-color: var(--textarea-border-color-hover, #{$label-text});
  }

  &:focus {
    --textarea-border-color: var(
      --textarea-border-color-focus,
      #{hrc.$primary}
    );
    outline-color: var(--textarea-border-color-focus, #{hrc.$primary});
  }

  @include color-variants(hrc.$colors);

  &--with-error,
  &--with-error:hover,
  &--with-error:focus {
    --textarea-border-color: var(--error, #{hrc.$error});
  }
  &--with-error:focus {
    outline-color: var(--error, #{hrc.$error});
  }

  &:disabled {
    --placeholder-color: var(--placeholder-disabled, #{$placeholder-disabled});
    --textarea-text: var(--textarea-text-disabled, #{$input-border-color});
    --textarea-bg: var(--textarea-bg-disabled);
    --textarea-border-color: var(
      --textarea-border-color-disabled,
      #{$input-border-color-disabled}
    );
    resize: none;
  }

  &--fullwidth {
    width: 100%;
  }

  &::placeholder {
    opacity: 1;
    color: var(--placeholder-color, $input-border-color);
  }
}
